<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>coolie.com</groupId>
  <artifactId>war</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>war Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>war</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.4.0</version>
        </plugin>
        <plugin>
              <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.3.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.13.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.3.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.4.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
??????????????????????????????????????????????????????????????????????????????????????????????????//


target/ to build_output/. 


 <build>
    <!-- Change default build directory -->
    <directory>build_output</directory>

    <!-- Where compiled classes go -->
    <outputDirectory>build_output/classes</outputDirectory>

    <!-- Where test classes go -->
    <testOutputDirectory>build_output/test-classes</testOutputDirectory>

    <!-- The final artifact name -->
    <finalName>war2</finalName>
  </build>


mvn clean package



????????????????????????????????????????????????????????????????????????????????????????????????????????????????????///



patchfile 



# Apply patch

git apply fix-bug.patch

# Or if it’s a proper commit patch:

git am fix-bug.patch

# Build with Maven

mvn clean install


???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

Rerun only failed tests

Maven Surefire automatically saves failures to a file.

Steps:

# First run
mvn test

# Rerun only failed tests
mvn surefire:test


Maven looks at target/surefire-reports/testng-failed.xml or TEST-*.xml.


?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

Skip tests

mvn clean install -DskipTests


????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????


9. Generate site report

Maven Site Plugin generates reports (docs, coverage, deps).

mvn site


Output goes to target/site/index.html.



????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????/
10. Build Java project and generated files

Build command:

mvn clean install


Inside target/:

classes/ → compiled .class files

test-classes/ → compiled test classes

myapp-1.0.jar (or .war) → final artifact

surefire-reports/ → test reports



?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????


13. Executable JAR with main method

1️⃣ Ensure Your Project Has a main Class

Example:

package com.example;

public class MainApp {
    public static void main(String[] args) {
        System.out.println("Hello from MainApp!");
    }
}


Place it in:

src/main/java/com/example/MainApp.java

2️⃣ Configure Maven JAR Plugin in pom.xml

Since you don’t need tests, you can skip any test configuration. Just focus on specifying the mainClass.

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.3.0</version>
            <configuration>
                <archive>
                    <manifest>
                        <mainClass>com.example.MainApp</mainClass>
                    </manifest>
                </archive>
            </configuration>
        </plugin>
    </plugins>
</build>


<mainClass> → fully qualified name of your main class.

No need for any test dependency (junit) if you don’t have tests.

3️⃣ Build the Executable JAR

Run:

mvn clean package


Maven will generate:

target/your-artifactId-version.jar


This JAR is executable.

4️⃣ Run the JAR
java -jar target/your-artifactId-version.jar

???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????


12. Writing & running JUnit test   ***************************


If you don’t have src/test/java, you need to create it manually:

mkdir -p src/test/java


Now you have a proper location for your tests.

2️⃣ Add JUnit dependency

Edit your pom.xml to include JUnit (JUnit 4 example):

<dependencies>
    <!-- Existing dependencies -->
    
    <!-- JUnit for testing -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.2</version>
        <scope>test</scope>
    </dependency>
</dependencies>


If you prefer JUnit 5, the dependency is different (org.junit.jupiter).

3️⃣ Write a simple test

Example: testing a Calculator class (src/main/java/com/example/Calculator.java):

package com.example;

public class Calculator {
    public int add(int a, int b) {
        return a + b;
    }
}


Create test class in src/test/java/com/example/CalculatorTest.java:

package com.example;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class CalculatorTest {

    @Test
    public void testAdd() {
        Calculator calc = new Calculator();
        assertEquals(5, calc.add(2, 3));
    }
}

4️⃣ Run tests

From the terminal, run:

mvn test


??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????






